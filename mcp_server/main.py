# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:07:32+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query, UploadFile

from models import (
    Counter,
    CounterMap,
    DailyInvocationStatistic,
    ImportJob,
    JobsGetResponse,
    KeycloakConfig,
    LabelsMap,
    Metadata,
    MetricsConformanceAggregateGetResponse,
    MetricsInvocationsTopGetResponse,
    MetricsTestsLatestGetResponse,
    OperationOverrideDTO,
    QueryMap,
    Resource,
    ResourcesServiceServiceIdGetResponse,
    Secret,
    SecretsGetResponse,
    Service,
    ServiceIds,
    ServicesIdGetResponse,
    ServicesSearchGetResponse,
    TestCaseResult,
    TestCaseReturnDTO,
    TestConformanceMetric,
    TestRequest,
    TestResult,
    TestsIdEventsTestCaseIdGetResponse,
    TestsIdMessagesTestCaseIdGetResponse,
    TestsServiceServiceIdGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'laurent@microcks.io',
        'name': 'Laurent Broudoux',
        'url': 'https://github.com/microcks',
    },
    description='API offered by Microcks, the Kuebrnetes native tools for API and microservices mocking and testing (microcks.io)',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0',
    },
    title='Microcks API v1.7',
    version='1.7.0',
    servers=[
        {'url': 'http://microcks.local'},
        {'description': '', 'url': 'http://microcks.example.com/api'},
    ],
)


@app.post(
    '/artifact/upload',
    description=""" Uploads an artifact to be imported by Microcks. """,
    tags=['artifact_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def upload_artifact(
    main_artifact: bool = Query(..., alias='mainArtifact'), file: UploadFile = ...
):
    """
    Upload an artifact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/export',
    description=""" Export a repostiory snapshot with requested services """,
    tags=['artifact_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def export_snapshot(service_ids: ServiceIds = Query(..., alias='serviceIds')):
    """
    Export a snapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/features/config',
    tags=['service_operations_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_features_configuration():
    """
    Get features configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/import',
    description=""" Import a repository snapshot previsouly exported into Microcks """,
    tags=['artifact_management', 'import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def import_snapshot(file: UploadFile):
    """
    Import a snapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/jobs',
    description=""" Retrieve a list of ImportJobs """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_import_jobs(
    page: Optional[int] = None, size: Optional[int] = None, name: Optional[str] = None
):
    """
    Get ImportJobs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/jobs',
    description=""" Create a new ImportJob """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_import_job(body: ImportJob):
    """
    Create ImportJob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/jobs/count',
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_import_job_counter():
    """
    Get the ImportJobs counter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/jobs/{id}',
    description=""" Delete an ImportJob """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_import_job(id: str):
    """
    Delete ImportJob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/jobs/{id}',
    description=""" Retrieve an ImportJob using its identifier """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_jobs__id(id: str):
    """
    Get ImportJob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/jobs/{id}',
    description=""" Update an ImportJob """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_jobs__id(id: str, body: ImportJob = ...):
    """
    Update ImportJob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/jobs/{id}/activate',
    description=""" Make an ImportJob active, so that it is executed """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def activate_import_job(id: str):
    """
    Activate an ImportJob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/jobs/{id}/start',
    description=""" Starting an ImportJob forces it to immediatly import mock definitions """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def start_import_job(id: str):
    """
    Start an ImportJob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/jobs/{id}/stop',
    description=""" Stopping an ImportJob desactivate it, so that it won't execute at next schedule """,
    tags=['import_job_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def stop_import_job(id: str):
    """
    Stop an ImportJob
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/keycloak/config',
    tags=['authentication_settings'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_keycloak_config():
    """
    Get authentification configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/conformance/aggregate',
    tags=['conformance_data_metrics'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_conformance_metrics_aggregation():
    """
    Get aggregation of conformance metrics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/conformance/service/{serviceId}',
    tags=['conformance_data_metrics'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_service_test_conformance_metric(service_id: str = Path(..., alias='serviceId')):
    """
    Get conformance metrics for a Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/invocations/global',
    tags=['invocation_metrics_collection', 'conformance_data_metrics'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_aggregated_invocations_stats(day: Optional[str] = None):
    """
    Get aggregated invocation statistics for a day
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/invocations/global/latest',
    tags=['invocation_metrics_collection', 'conformance_data_metrics'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_latest_aggregated_invocations_stats(limit: Optional[int] = None):
    """
    Get aggregated invocations statistics for latest days
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/invocations/top',
    tags=['invocation_metrics_collection'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_top_ivnocations_stats_by_day(
    day: Optional[str] = None, limit: Optional[int] = None
):
    """
    Get top invocation statistics for a day
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/invocations/{serviceName}/{serviceVersion}',
    tags=['invocation_metrics_collection', 'conformance_data_metrics'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_invocation_stats_by_service(
    day: Optional[str] = None,
    service_name: str = Path(..., alias='serviceName'),
    service_version: str = Path(..., alias='serviceVersion'),
):
    """
    Get invocation statistics for Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics/tests/latest',
    tags=['test_results_retrieval', 'conformance_data_metrics'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_latest_test_results(limit: Optional[int] = None):
    """
    Get latest tests results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/resources/service/{serviceId}',
    tags=['resource_query_management', 'service_operations_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_resources_by_service(service_id: str = Path(..., alias='serviceId')):
    """
    Get Resources by Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/resources/{name}',
    tags=['resource_query_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_resource(name: str):
    """
    Get Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/secrets',
    tags=['secret_store_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_secrets(page: Optional[int] = None, size: Optional[int] = None):
    """
    Get Secrets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/secrets',
    tags=['secret_store_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_secret(body: Secret = None):
    """
    Create a new Secret
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/secrets/count',
    tags=['secret_store_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_secrets_counter():
    """
    Get the Secrets counter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/secrets/{id}',
    description=""" Delete a Secret """,
    tags=['secret_store_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_secret(id: str):
    """
    Delete Secret
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/secrets/{id}',
    description=""" Retrieve a Secret """,
    tags=['secret_store_management', 'authentication_settings'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_secret(id: str):
    """
    Get Secret
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/secrets/{id}',
    description=""" Update a Secret """,
    tags=['secret_store_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_secret(id: str):
    """
    Update Secret
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/services',
    tags=['service_operations_management', 'resource_query_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_services(page: Optional[int] = None, size: Optional[int] = None):
    """
    Get Services and APIs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/services/count',
    tags=[
        'conformance_data_metrics',
        'invocation_metrics_collection',
        'service_operations_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_services_counter():
    """
    Get the Services counter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/services/labels',
    tags=['service_operations_management', 'resource_query_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_services_labels():
    """
    Get the already used labels for Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/services/search',
    tags=['resource_query_management', 'service_operations_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_services(query_map: QueryMap = Query(..., alias='queryMap')):
    """
    Search for Services and APIs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/services/{id}',
    description=""" Delete a Service """,
    tags=['service_operations_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_service(id: str):
    """
    Delete Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/services/{id}',
    tags=['service_operations_management', 'resource_query_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_service(messages: Optional[bool] = None, id: str = ...):
    """
    Get Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/services/{id}/metadata',
    tags=['service_operations_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_service_metadata(id: str, body: Metadata = ...):
    """
    Update Service Metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/services/{id}/operation',
    tags=['service_operations_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def override_service_operation(
    operation_name: str = Query(..., alias='operationName'),
    id: str = ...,
    body: OperationOverrideDTO = ...,
):
    """
    Override Service Operation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tests',
    tags=['test_case_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_test(body: TestRequest):
    """
    Create a new Test
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tests/service/{serviceId}',
    tags=['test_results_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_test_results_by_service(service_id: str = Path(..., alias='serviceId')):
    """
    Get TestResults by Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tests/service/{serviceId}/count',
    tags=['test_results_retrieval', 'conformance_data_metrics'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_test_results_by_service_counter(service_id: str = Path(..., alias='serviceId')):
    """
    Get the TestResults for Service counter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tests/{id}',
    tags=['test_results_retrieval', 'test_case_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_test_result(id: str):
    """
    Get TestResult
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tests/{id}/events/{testCaseId}',
    tags=['test_case_management', 'test_case_details_analysis'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_events_by_test_case(id: str, test_case_id: str = Path(..., alias='testCaseId')):
    """
    Get events for TestCase
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tests/{id}/messages/{testCaseId}',
    tags=['test_case_management', 'test_case_details_analysis'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_messages_by_test_case(
    id: str, test_case_id: str = Path(..., alias='testCaseId')
):
    """
    Get messages for TestCase
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tests/{id}/testCaseResult',
    description=""" Report a TestCaseResult (typically used by a Test runner) """,
    tags=['test_case_management', 'test_results_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def report_test_case_result(id: str, body: TestCaseReturnDTO = ...):
    """
    Report and create a new TestCaseResult
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
